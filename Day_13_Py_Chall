def main():
    # 1. Filter only negative and zero in the list using list comprehension
    numbers = [-4, -3, -2, -1, 0, 2, 4, 6]
    lst = [i for i in numbers if i <= 0]
    print(lst)
    # 2. Flatten the following list of lists to a one dimensional list :
    list_of_lists = [[[1, 2, 3]], [[4, 5, 6]], [[7, 8, 9]]]
    lst_flt = [i for k in list_of_lists for j in k for i in j]
    print(lst_flt)
    # 3. Using list comprehension create the following list of tuples:
    # [(0, 1, 0, 0, 0, 0, 0),
    # (1, 1, 1, 1, 1, 1, 1),
    # (2, 1, 2, 4, 8, 16, 32),
    # (3, 1, 3, 9, 27, 81, 243),
    # (4, 1, 4, 16, 64, 256, 1024),
    # (5, 1, 5, 25, 125, 625, 3125),
    # (6, 1, 6, 36, 216, 1296, 7776),
    # (7, 1, 7, 49, 343, 2401, 16807),
    # (8, 1, 8, 64, 512, 4096, 32768),
    # (9, 1, 9, 81, 729, 6561, 59049),
    # (10, 1, 10, 100, 1000, 10000, 100000)]
    tp_3_1 = [(i, i ** 0, i ** 1, i ** 2, i ** 3, i ** 4, i ** 5) for i in range(11)]
    print(tp_3_1)
    # 4. Flatten the following list to a new list:
    countries = [[('Finland', 'Helsinki')], [('Sweden', 'Stockholm')], [('Norway', 'Oslo')]]
    # [['FINLAND','FIN', 'HELSINKI'], ['SWEDEN', 'SWE', 'STOCKHOLM'], ['NORWAY', 'NOR', 'OSLO']]
    countries_capp = [(i[0][0].upper(), i[0][0][:3].upper(), i[0][1].upper()) for i in countries]
    print(countries_capp)
    # 5. Change the following list to a list of dictionaries:
    dict_countries = [{'country': i[0][0], 'city': i[0][1]} for i in countries]
    print(dict_countries)
    # 6. Change the following list of lists to a list of concatenated strings:
    names = [[('Asabeneh', 'Yetayeh')], [('David', 'Smith')], [('Donald', 'Trump')], [('Bill', 'Gates')]]
    # output
    # ['Asabeneh Yetaeyeh', 'David Smith', 'Donald Trump', 'Bill Gates']
    names_join = [i[0][0] + ' ' + i[0][1] for i in names]
    print(names_join)
    # 7. Write a lambda function which can solve a slope or y-intercept of linear functions.
    print(slope_for_y()(2, 3, 4))


def slope_for_y():
    return lambda m, x, b: (m * x) + b


main()
